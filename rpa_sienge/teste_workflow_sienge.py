
"""
Teste Workflow RPA Sienge
Testa workflow completo com os 3 cen√°rios principais do PDD

Desenvolvido em Portugu√™s Brasileiro
Separado da l√≥gica de produ√ß√£o
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# Adiciona o diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent.parent))

from rpa_sienge.simulador_sienge import executar_simulacao_sienge


class TesteWorkflowSienge:
    """
    Testa workflow completo do RPA Sienge com 3 cen√°rios principais
    """

    def __init__(self):
        self.resultados = []

    def criar_cenarios_teste(self) -> List[Dict[str, Any]]:
        """Cria os 3 cen√°rios principais de teste"""
        timestamp = datetime.now().strftime("%m%d")
        
        return [
            # Cen√°rio 1: Cliente Adimplente (DEVE reparcelar)
            {
                "nome": "Cliente Adimplente",
                "contrato": {
                    "numero_titulo": f"PDDADIMPLENTE{timestamp}",
                    "cliente": "CLIENTE TESTE ADIMPLENTE LTDA",
                    "empreendimento": "TESTE ADIMPLENTE",
                    "cnpj_unidade": "12.345.678/0001-01"
                },
                "esperado": True,
                "descricao": "Cliente sem parcelas CT vencidas"
            },
            
            # Cen√°rio 2: Cliente Inadimplente (N√ÉO DEVE reparcelar)
            {
                "nome": "Cliente Inadimplente", 
                "contrato": {
                    "numero_titulo": f"PDDINADIMPLENTE{timestamp}",
                    "cliente": "CLIENTE TESTE INADIMPLENTE LTDA",
                    "empreendimento": "TESTE INADIMPLENTE",
                    "cnpj_unidade": "12.345.678/0001-02"
                },
                "esperado": False,
                "descricao": "Cliente com 3+ parcelas CT vencidas"
            },
            
            # Cen√°rio 3: Cliente Limite (DEVE reparcelar)
            {
                "nome": "Cliente Limite",
                "contrato": {
                    "numero_titulo": f"PDDLIMITE{timestamp}",
                    "cliente": "CLIENTE TESTE LIMITE LTDA", 
                    "empreendimento": "TESTE LIMITE",
                    "cnpj_unidade": "12.345.678/0001-03"
                },
                "esperado": True,
                "descricao": "Cliente com 2 parcelas CT vencidas (< 3)"
            }
        ]

    def criar_indices_teste(self) -> Dict[str, Any]:
        """Cria √≠ndices econ√¥micos para teste"""
        return {
            "ipca": {
                "valor": 4.62,
                "tipo": "IPCA",
                "periodo": "Dezembro/2024"
            },
            "igpm": {
                "valor": 3.89,
                "tipo": "IGP-M",
                "periodo": "Dezembro/2024"
            }
        }

    def criar_credenciais_teste(self) -> Dict[str, str]:
        """Cria credenciais de teste"""
        return {
            "url": "https://sienge-teste.com",
            "usuario": "usuario_teste",
            "senha": "senha_teste",
            "empresa": "EMPRESA TESTE"
        }

    async def executar_cenario(
        self,
        cenario: Dict[str, Any],
        indices: Dict[str, Any],
        credenciais: Dict[str, str]
    ) -> Dict[str, Any]:
        """Executa um cen√°rio espec√≠fico"""
        
        print(f"\nüß™ TESTANDO CEN√ÅRIO: {cenario['nome']}")
        print("-" * 50)
        print(f"üìã Contrato: {cenario['contrato']['numero_titulo']}")
        print(f"üë§ Cliente: {cenario['contrato']['cliente']}")
        print(f"üìù Descri√ß√£o: {cenario['descricao']}")
        print(f"üìä Resultado esperado: {'‚úÖ DEVE reparcelar' if cenario['esperado'] else '‚ùå N√ÉO deve reparcelar'}")

        try:
            # Executa simula√ß√£o
            resultado = await executar_simulacao_sienge(
                contrato=cenario["contrato"],
                indices_economicos=indices,
                credenciais_sienge=credenciais
            )

            # Verifica se resultado est√° conforme esperado
            sucesso_obtido = resultado.sucesso
            sucesso_esperado = cenario["esperado"]
            
            teste_passou = sucesso_obtido == sucesso_esperado

            # Monta resultado do teste
            resultado_teste = {
                "cenario": cenario["nome"],
                "contrato": cenario["contrato"]["numero_titulo"],
                "esperado": sucesso_esperado,
                "obtido": sucesso_obtido,
                "teste_passou": teste_passou,
                "resultado_rpa": resultado.dados if resultado.sucesso else None,
                "erro_rpa": resultado.erro if not resultado.sucesso else None,
                "mensagem": resultado.mensagem,
                "timestamp": datetime.now().isoformat()
            }

            # Log do resultado
            if teste_passou:
                print("‚úÖ TESTE PASSOU - Comportamento conforme esperado")
                if resultado.sucesso:
                    dados_reparcelamento = resultado.dados.get("reparcelamento", {})
                    detalhes = dados_reparcelamento.get("detalhes_reparcelamento", {})
                    print(f"   üìã Novo t√≠tulo: {dados_reparcelamento.get('novo_titulo_gerado', 'N/A')}")
                    print(f"   üí∞ Novo saldo: R$ {detalhes.get('valor_total', 0):,.2f}")
                    print(f"   üìà √çndice IGP-M: {detalhes.get('indice_aplicado', 0)}%")
                else:
                    print(f"   üìã Motivo bloqueio: {resultado.mensagem}")
            else:
                print("‚ùå TESTE FALHOU - Comportamento inesperado")
                print(f"   üìä Esperado: {sucesso_esperado}, Obtido: {sucesso_obtido}")

            return resultado_teste

        except Exception as e:
            print(f"üí• ERRO NO TESTE: {str(e)}")
            return {
                "cenario": cenario["nome"],
                "contrato": cenario["contrato"]["numero_titulo"],
                "esperado": cenario["esperado"],
                "obtido": None,
                "teste_passou": False,
                "erro_teste": str(e),
                "timestamp": datetime.now().isoformat()
            }

    async def executar_workflow_completo(self) -> Dict[str, Any]:
        """Executa workflow completo com os 3 cen√°rios"""
        
        print("üéØ TESTE WORKFLOW COMPLETO - RPA SIENGE")
        print("=" * 60)
        print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("üìù Testando 3 cen√°rios principais do PDD")
        print("=" * 60)

        # Preparar dados
        cenarios = self.criar_cenarios_teste()
        indices = self.criar_indices_teste()
        credenciais = self.criar_credenciais_teste()

        print(f"üîß Configura√ß√£o:")
        print(f"   üìà IPCA: {indices['ipca']['valor']}%")
        print(f"   üìà IGP-M: {indices['igpm']['valor']}%")
        print(f"   üè¢ URL: {credenciais['url']}")

        # Executar todos os cen√°rios
        for cenario in cenarios:
            resultado_cenario = await self.executar_cenario(cenario, indices, credenciais)
            self.resultados.append(resultado_cenario)

        # Resumo final
        print("\nüìä RESUMO DO WORKFLOW")
        print("=" * 40)

        testes_passaram = 0
        total_testes = len(self.resultados)

        for resultado in self.resultados:
            status = "‚úÖ PASSOU" if resultado["teste_passou"] else "‚ùå FALHOU"
            nome = resultado["cenario"]
            print(f"{nome:20} {status}")
            
            if resultado["teste_passou"]:
                testes_passaram += 1

        print(f"\nüéØ RESULTADO FINAL: {testes_passaram}/{total_testes} testes passaram")

        if testes_passaram == total_testes:
            print("üéâ WORKFLOW COMPLETO - TODOS OS TESTES PASSARAM!")
            resultado_final = True
        else:
            print("‚ö†Ô∏è WORKFLOW COM FALHAS - Verificar cen√°rios que falharam")
            resultado_final = False

        # Monta resultado completo
        return {
            "sucesso": resultado_final,
            "total_cenarios": total_testes,
            "cenarios_passaram": testes_passaram,
            "cenarios_falharam": total_testes - testes_passaram,
            "detalhes_cenarios": self.resultados,
            "timestamp_execucao": datetime.now().isoformat(),
            "duracao_estimada": "~15 segundos (simulado)"
        }

    async def executar_cenario_isolado(self, nome_cenario: str) -> Dict[str, Any]:
        """Executa apenas um cen√°rio espec√≠fico"""
        cenarios = self.criar_cenarios_teste()
        indices = self.criar_indices_teste()
        credenciais = self.criar_credenciais_teste()

        # Busca cen√°rio espec√≠fico
        cenario_encontrado = None
        for cenario in cenarios:
            if nome_cenario.lower() in cenario["nome"].lower():
                cenario_encontrado = cenario
                break

        if not cenario_encontrado:
            print(f"‚ùå Cen√°rio '{nome_cenario}' n√£o encontrado")
            print("Cen√°rios dispon√≠veis:")
            for cenario in cenarios:
                print(f"  - {cenario['nome']}")
            return {"sucesso": False, "erro": "Cen√°rio n√£o encontrado"}

        # Executa cen√°rio
        resultado = await self.executar_cenario(cenario_encontrado, indices, credenciais)
        return {"sucesso": resultado["teste_passou"], "resultado": resultado}


async def main():
    """Fun√ß√£o principal do teste"""
    
    print("ü§ñ TESTE WORKFLOW RPA SIENGE")
    print("Teste completo com 3 cen√°rios principais")
    print("Desenvolvido em Python")
    print()

    teste = TesteWorkflowSienge()

    # Verifica argumentos
    if len(sys.argv) > 1:
        comando = sys.argv[1].lower()
        
        if comando in ["adimplente", "inadimplente", "limite"]:
            resultado = await teste.executar_cenario_isolado(comando)
            return resultado["sucesso"]
        elif comando in ["completo", "all", "workflow"]:
            resultado = await teste.executar_workflow_completo()
            return resultado["sucesso"]
        else:
            print(f"‚ùå Comando inv√°lido: {comando}")
            print("Comandos dispon√≠veis:")
            print("  - adimplente: Testa apenas cen√°rio adimplente")
            print("  - inadimplente: Testa apenas cen√°rio inadimplente") 
            print("  - limite: Testa apenas cen√°rio limite")
            print("  - completo: Executa workflow completo")
            return False
    else:
        # Execu√ß√£o completa por padr√£o
        resultado = await teste.executar_workflow_completo()
        return resultado["sucesso"]


if __name__ == "__main__":
    # Configurar event loop
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        resultado = asyncio.run(main())
        sys.exit(0 if resultado else 1)
    except KeyboardInterrupt:
        print("\nüëã Teste cancelado pelo usu√°rio")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• Erro fatal: {str(e)}")
        sys.exit(1)
