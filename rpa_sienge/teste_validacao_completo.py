
#!/usr/bin/env python3
"""
Teste Completo de Valida√ß√£o RPA Sienge
Testa todas as regras do PDD usando planilhas Excel mockadas

Desenvolvido em Portugu√™s Brasileiro
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# Adiciona o diret√≥rio pai ao path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

# Import funciona tanto quando executado da raiz quanto da pasta rpa_sienge
try:
    from rpa_sienge.rpa_sienge import RPASienge
except ImportError:
    from rpa_sienge import RPASienge

try:
    from rpa_sienge.criar_planilhas_exemplo import criar_todas_planilhas
except ImportError:
    from criar_planilhas_exemplo import criar_todas_planilhas

async def testar_cenario_especifico(rpa, arquivo_planilha, nome_cenario, resultado_esperado):
    """
    Testa um cen√°rio espec√≠fico com arquivo de planilha mockado
    
    Args:
        rpa: Inst√¢ncia do RPA Sienge
        arquivo_planilha: Caminho para o arquivo Excel de teste
        nome_cenario: Nome do cen√°rio para logging
        resultado_esperado: Resultado esperado (pode_reparcelar = True/False)
    
    Returns:
        Resultado do teste (True se passou, False se falhou)
    """
    try:
        print(f"\nüß™ TESTANDO: {nome_cenario}")
        print("-" * 50)
        
        # Dados de contrato exemplo para teste
        contrato_teste = {
            "cliente": f"CLIENTE {nome_cenario.upper()}",
            "numero_titulo": f"12345{hash(nome_cenario) % 10000:04d}",
            "cnpj_unidade": "12.345.678/0001-90",
            "indexador": "IPCA"
        }
        
        # Verifica se arquivo existe
        if not os.path.exists(arquivo_planilha):
            print(f"‚ùå Arquivo n√£o encontrado: {arquivo_planilha}")
            return False
        
        print(f"üìÅ Processando: {Path(arquivo_planilha).name}")
        
        # Processa o relat√≥rio Excel mockado
        dados_financeiros = await rpa._processar_relatorio_excel(arquivo_planilha, contrato_teste)
        
        # Exibe resultados detalhados
        print(f"\nüìä RESULTADOS DO PROCESSAMENTO:")
        print(f"   Cliente: {dados_financeiros.get('cliente', 'N/A')}")
        print(f"   T√≠tulo: {dados_financeiros.get('numero_titulo', 'N/A')}")
        print(f"   Total Parcelas: {dados_financeiros.get('total_parcelas', 0)}")
        print(f"   Parcelas Pendentes: {dados_financeiros.get('parcelas_pendentes', 0)}")
        print(f"   Parcelas Vencidas: {len(dados_financeiros.get('parcelas_vencidas', []))}")
        print(f"   Parcelas CT Vencidas: {len(dados_financeiros.get('parcelas_ct_vencidas', []))}")
        print(f"   Parcelas REC/FAT: {len(dados_financeiros.get('parcelas_rec_fat', []))}")
        print(f"   Saldo Total: R$ {dados_financeiros.get('saldo_total', 0):,.2f}")
        print(f"   Status Cliente: {dados_financeiros.get('status_cliente', 'N/A')}")
        
        # Resultado da valida√ß√£o
        pode_reparcelar = dados_financeiros.get('pode_reparcelar', False)
        motivo = dados_financeiros.get('motivo_validacao', 'N/A')
        
        print(f"\nüîç VALIDA√á√ÉO DE REPARCELAMENTO:")
        print(f"   Pode Reparcelar: {'‚úÖ SIM' if pode_reparcelar else '‚ùå N√ÉO'}")
        print(f"   Motivo: {motivo}")
        
        # Verifica se resultado est√° conforme esperado
        if pode_reparcelar == resultado_esperado:
            print(f"‚úÖ TESTE PASSOU - Resultado conforme esperado")
            
            # Log adicional das parcelas para verifica√ß√£o
            if dados_financeiros.get('parcelas_ct_vencidas'):
                print(f"\nüìã PARCELAS CT VENCIDAS ({len(dados_financeiros['parcelas_ct_vencidas'])}):")
                for i, parcela in enumerate(dados_financeiros['parcelas_ct_vencidas'][:3], 1):
                    print(f"   {i}. {parcela.get('numero_parcela', 'N/A')} - "
                          f"Venc: {parcela.get('data_vencimento', 'N/A')} - "
                          f"Valor: R$ {parcela.get('valor', 0):,.2f}")
            
            if dados_financeiros.get('parcelas_rec_fat'):
                print(f"\nüìã PARCELAS REC/FAT ({len(dados_financeiros['parcelas_rec_fat'])}):")
                for i, parcela in enumerate(dados_financeiros['parcelas_rec_fat'][:3], 1):
                    print(f"   {i}. {parcela.get('numero_parcela', 'N/A')} - "
                          f"Tipo: {parcela.get('tipo_documento', 'N/A')} - "
                          f"Valor: R$ {parcela.get('valor', 0):,.2f}")
            
            return True
        else:
            print(f"‚ùå TESTE FALHOU - Esperado: {resultado_esperado}, Obtido: {pode_reparcelar}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO NO TESTE: {str(e)}")
        import traceback
        print(f"üîç Detalhes: {traceback.format_exc()}")
        return False

async def executar_teste_completo():
    """
    Executa teste completo de valida√ß√£o com todos os cen√°rios do PDD
    """
    print("üß™ TESTE COMPLETO DE VALIDA√á√ÉO - RPA SIENGE")
    print("=" * 60)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # 1. Cria planilhas de exemplo se n√£o existirem
        print("üèóÔ∏è Verificando planilhas de exemplo...")
        pasta_exemplos = Path(__file__).parent / "planilhas_exemplo"
        
        if not pasta_exemplos.exists() or len(list(pasta_exemplos.glob("*.xlsx"))) < 5:
            print("üìã Criando planilhas de exemplo...")
            criar_todas_planilhas()
        else:
            print("‚úÖ Planilhas de exemplo j√° existem")
        
        # 2. Cria inst√¢ncia do RPA
        rpa = RPASienge()
        
        # 3. Define cen√°rios de teste - usando caminhos absolutos
        pasta_base = Path(__file__).parent / "planilhas_exemplo"
        cenarios_teste = [
            {
                "arquivo": str(pasta_base / "saldo_devedor_adimplente.xlsx"),
                "nome": "Cliente Adimplente",
                "esperado": True,  # PODE reparcelar
                "descricao": "Cliente sem parcelas CT vencidas, apenas parcelas normais"
            },
            {
                "arquivo": str(pasta_base / "saldo_devedor_inadimplente.xlsx"), 
                "nome": "Cliente Inadimplente",
                "esperado": False,  # N√ÉO PODE reparcelar
                "descricao": "Cliente com 3+ parcelas CT vencidas"
            },
            {
                "arquivo": str(pasta_base / "saldo_devedor_custas_honorarios.xlsx"),
                "nome": "Cliente com Custas/Honor√°rios", 
                "esperado": True,  # PODE reparcelar (mas com pend√™ncias)
                "descricao": "Cliente com parcelas REC/FAT pendentes"
            },
            {
                "arquivo": str(pasta_base / "saldo_devedor_limite_inadimplencia.xlsx"),
                "nome": "Cliente Limite Inadimpl√™ncia",
                "esperado": True,  # PODE reparcelar (2 CT < 3)
                "descricao": "Cliente com exatamente 2 parcelas CT vencidas"
            },
            {
                "arquivo": str(pasta_base / "saldo_devedor_situacao_mista.xlsx"),
                "nome": "Cliente Situa√ß√£o Mista",
                "esperado": True,  # PODE reparcelar (1 CT + REC)
                "descricao": "Cliente com 1 parcela CT e parcelas REC/FAT"
            }
        ]
        
        # 4. Executa todos os testes
        resultados = []
        print(f"\nüöÄ EXECUTANDO {len(cenarios_teste)} CEN√ÅRIOS DE TESTE")
        print("=" * 60)
        
        for i, cenario in enumerate(cenarios_teste, 1):
            print(f"\nüìã CEN√ÅRIO {i}/{len(cenarios_teste)}: {cenario['nome']}")
            print(f"üìù Descri√ß√£o: {cenario['descricao']}")
            print(f"üéØ Resultado Esperado: {'‚úÖ PODE reparcelar' if cenario['esperado'] else '‚ùå N√ÉO PODE reparcelar'}")
            
            resultado = await testar_cenario_especifico(
                rpa=rpa,
                arquivo_planilha=cenario['arquivo'],
                nome_cenario=cenario['nome'],
                resultado_esperado=cenario['esperado']
            )
            
            resultados.append({
                "cenario": cenario['nome'],
                "passou": resultado,
                "esperado": cenario['esperado']
            })
        
        # 5. Resume resultados
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES")
        print("=" * 60)
        
        testes_passaram = sum(1 for r in resultados if r['passou'])
        total_testes = len(resultados)
        
        for i, resultado in enumerate(resultados, 1):
            status = "‚úÖ PASSOU" if resultado['passou'] else "‚ùå FALHOU"
            print(f"   {i}. {resultado['cenario']}: {status}")
        
        print(f"\nüèÜ RESULTADO GERAL: {testes_passaram}/{total_testes} testes passaram")
        
        if testes_passaram == total_testes:
            print("üéâ TODOS OS TESTES PASSARAM! Sistema validado conforme PDD.")
            return True
        else:
            print("‚ö†Ô∏è ALGUNS TESTES FALHARAM. Revisar implementa√ß√£o.")
            return False
            
    except Exception as e:
        print(f"üí• ERRO GERAL NO TESTE: {str(e)}")
        import traceback
        print(f"üîç Detalhes: {traceback.format_exc()}")
        return False

async def testar_cenario_individual(nome_cenario):
    """
    Testa apenas um cen√°rio espec√≠fico
    
    Args:
        nome_cenario: Nome do cen√°rio para testar ('adimplente', 'inadimplente', etc.)
    """
    print(f"üß™ TESTE INDIVIDUAL - {nome_cenario.upper()}")
    print("=" * 50)
    
    pasta_base = Path(__file__).parent / "planilhas_exemplo"
    mapeamento_arquivos = {
        'adimplente': (str(pasta_base / 'saldo_devedor_adimplente.xlsx'), True),
        'inadimplente': (str(pasta_base / 'saldo_devedor_inadimplente.xlsx'), False),
        'custas': (str(pasta_base / 'saldo_devedor_custas_honorarios.xlsx'), True),
        'limite': (str(pasta_base / 'saldo_devedor_limite_inadimplencia.xlsx'), True),
        'misto': (str(pasta_base / 'saldo_devedor_situacao_mista.xlsx'), True)
    }
    
    if nome_cenario.lower() not in mapeamento_arquivos:
        print(f"‚ùå Cen√°rio '{nome_cenario}' n√£o encontrado")
        print(f"üìã Cen√°rios dispon√≠veis: {', '.join(mapeamento_arquivos.keys())}")
        return False
    
    arquivo, esperado = mapeamento_arquivos[nome_cenario.lower()]
    
    # Cria planilha se necess√°rio
    if not os.path.exists(arquivo):
        print("üìã Criando planilha de exemplo...")
        criar_todas_planilhas()
    
    # Testa cen√°rio
    rpa = RPASienge()
    resultado = await testar_cenario_especifico(
        rpa=rpa,
        arquivo_planilha=arquivo,
        nome_cenario=nome_cenario,
        resultado_esperado=esperado
    )
    
    return resultado

if __name__ == "__main__":
    # Verifica se foi passado um cen√°rio espec√≠fico
    if len(sys.argv) > 1:
        cenario = sys.argv[1]
        resultado = asyncio.run(testar_cenario_individual(cenario))
    else:
        resultado = asyncio.run(executar_teste_completo())
    
    if resultado:
        print("\nüéâ TESTE(S) APROVADO(S)!")
        sys.exit(0)
    else:
        print("\nüí• TESTE(S) FALHOU/FALHARAM!")
        sys.exit(1)
